# 
#   This is valid configuration for SXP daemon and also Users guide how to write 
#   configuration file for SXP daemon
#
#   ************************ CONFIGURATION SYNTAX: *****************************
#   * SXPD uses libconfig for parsing and loading configuration. SXPD uses
#      for configuration validation own parser to provide more detailed 
#      information about syntax error, so SXPD configuration syntax is 
#      subset of libconfig syntax.
#   
#   * Configuration contains settings. S setting has the syntax:
#       name = value ;
#       
#       or:
#       
#       name : value ;
#       
#       The trailing semicolon is optional. Whitespace is not significant.
#       The value may be a scalar value, an array, a group, or a list.
#        
#   * A group has the form:
#       
#       { settings ... }
#       
#       Groups can contain any number of settings, but each setting must have a 
#       unique name within the group.
#   
#   * A list has the form:
#   
#       ( group, group ... )
#   
#       A list may have zero or more group elements.
#    
#   * Integers can be represented in one of two ways: as a series of one or more
#   decimal digits (‘0’ - ‘9’), or as a hexadecimal value consisting of the
#   characters ‘0x’ followed by a series of one or more hexadecimal digits
#   (‘0’ - ‘9’, ‘A’ - ‘F’, ‘a’ - ‘f’). 64-bit integer values are represented 
#   identically to integers but terminated by 'L' (uppercase L character).
#   
#   * Boolean values may have one of the following values: ‘true’, ‘false’, or
#   any mixed-case variation thereof.
#   
#   * String values consist of arbitrary text delimited by double quotes. 
#   Literal double quotes can be escaped by preceding them with a backslash: 
#   ‘\"’. The escape sequences ‘\\’, ‘\f’, ‘\n’, ‘\r’, and ‘\t’ are also
#   recognized, and have the usual meaning. In addition, the ‘\x’ escape
#   sequence is supported. this sequence must be followed by exactly two
#   hexadecimal digits, which represent an 8-bit ASCII value. For example, 
#   ‘\xFF’ represents the character with ASCII code 0xFF. No other escape
#   sequences are currently supported.
#   
#   * Script-style comments are allowed within a configuration. All text
#     beginning with a ‘#’ character to the end of the line is ignored.
#   
#   ************************* CONFIGURATION CONTENT: ***************************
#   SXPD configuration settings are divided into three main settings: "global",
#   "peers" and "bindings".
#   
#   Setting "global" in mandatory. It is a group which contains main global
#   configuration settings. Description of each global setting item is
#   directly written within this configuration.
#    
#   Setting "peers" is optional. It is a list of group items which contains peer
#   configuration. Detailed description of peers setting is directly written
#   within this configuration.
#   
#   Setting "bindings" is optional. It is a list of group items which contains
#   binding configuration. Detailed description of bindings setting is directly
#   written within this configuration.
#


#   global settings is mandatory
global = {
#     Log level is optional string setting. There are four allowed values: 
#     "alert", "error", "trace" and "debug". Log level "alert" show only logs
#     when immediate user action is required. All following log levels "error",
#     "trace" and "debug" show also previous log levels. Default log level 
#     value is "alert".
    log_level = "alert";

#     Retry timer is optional integer setting. Retry open timer is triggered
#     as long as there is one SXP connection on the device that is not up.
#     The default timer value is 120 seconds. Value 0 means retry timer will 
#     not be started.
    retry_timer = 5;
    
#     If a SXP connection is brought up within the delete hold down
#     timer period, bindings are re-populated from the speaker side.
#     At the same time, the old bindings learnt before the connection
#     goes down still holds.
#
#     Reconciliation timer starts right after the connection is
#     brought up to wait for the new bindings to be forwarded from
#     the peer.
#
#     Upon the timer expiry, SXP checks the bindings in its input
#     binding database and delete any stale bindings. Those are
#     bindings that could have been deleted on the remote side while
#     the connection was down.
#
#     Reconciliation timer is optional integer setting. The default timer value
#     is 120 seconds. Value 0 means reconciliation timer will not be started.
    reconciliation_timer = 80;
    
#     Hold Timer MAY be used by an SXP Listener for detect when a
#     connection is no longer live.
#       
#     If a listener does not receive successive KEEPALIVE, and/or
#     UPDATE messages within the period negotiated for the Hold Time
#     of a connection, the Hold Timer expires.
#
#     Upon the timer expiry, SXP MUST send an ERROR message with Hold
#     Timer Expired code and tear down the connection.
#      
#     A listener MAY have desirable range for Hold Time period locally
#     configured or a default of [90..180] seconds.  A value of
#     [0xFFFF..0xFFFF] implies that the keep-alive mechanism is not used.
    speaker_min_hold_time = 90;
    listener_min_hold_time = 80;
    listener_max_hold_time = 120;
    
#     Keep-alive Timer - Used by a speaker to trigger sending of KEEPALIVE
#     messages during intervals when no other information is exported via
#     UPDATE messages.
#       
#     A speaker MAY have a minimum acceptable Hold Time period locally
#     configured or a default of 120 seconds. This is the shortest
#     period of time a speaker is willing to send KEEPALIVE messages for
#     keeping the connection alive. Any shorter Hold Time period would
#     require a faster KEEPALIVE rate from the rate the speaker is ready
#     to support. A value of 0xFFFF implies that the keep-alive
#     mechanism is not used.
    keepalive_timer = 60;
    
#     Subnet expansion limit setting is optional. Value of this setting is
#     Integer of range 0 - 65535. Default value of this setting is 65535. 
#     Value of this setting is number, which is representating maximum
#     number of expanded IP addreses from all bindings which contains IPv4 
#     network prefixes. */
    subnet_expansion_limit = 50;
    
#     Default connection password is optional and is used when peer 
#     password is not specified. Password can be upto 80 ASII characters.
#     Connection password is used only for authenticating all messages using
#     he MD5 algorithm.
    default_connection_passwd = "password123";
    
#     SXP daemon can be optionally binded to specific IPv4 address and port. 
#     Bind IP setting is string formated IPv4 address. Port number setting is
#     integer of range 1 - 65535. Default port number value is 64000. */ 
    bind_ip = "127.0.0.1";
    port_number = 64001;
    
#     Node id is optional integer setting. Node id is unique 32 bit number.
#     Default value of this setting is IPv4 address of interface with 
#     highest IPv4 address.
    node_id = 0x00112233;
    
#    Enabled is optional setting which is used to enable/disable SXP daemon. 
#    Default value of this option is false.
    enabled = TRUE;
}

#   peers is optional setting, which contains peer list. Peer item is
#   represented as group.
peers = (
    {
#     Ip address is mandatory setting. Value of this setting is IPv4 address
#     in string format.
    ip_address = "127.0.0.2";

#     Port number is optional setting. Default port number value is 64000. 
    port_number = 64002;

#     Connection password setting is optional peer password used for
#     authenticating all messages using the MD5 algorithm. Password can
#     be upto 80 ASII characters. When connection password is not set,
#     global settings default connection password is used.
    connection_password = "secret";
        
#     Peer type is mandatory setting. Value is represented as string.
#     There are three allowed values: "speaker", "listener" and "both".
#     Each SXP connection has one peer designated as SXP speaker and the
#     other peer as SXP listener. The SXP speaker is responsible for
#     sending the IP-SGT bindings. The SXP listener is responsible for
#     collecting the IP-SGT bindings received from the speaker peer.
#     The peers can also be configured in a bi-directional "both" mode
#     where each of them act as both "speaker" and "listener".
    peer_type = "speaker";
    },
    {
        ip_address = "127.0.0.3";
        port_number = 64002;
        connection_password = "password";
        peer_type = "listener"
    }
    ,{
        ip_address = "127.0.0.4";
        port_number = 64002;
        connection_password = "password";
        peer_type = "both"
    }
);

#   Bindings is optional setting, which contains IP-SGT binding list.
#   Binding list contains informations, which are propagated from speaker to
#   listener. Binding item is represented as group. Binding setting must
#   contain one ipv4_prefix with ipv4 prefix length or ipv6 prefix and ipv6
#   prefix length. Binding setting must also contain sourge group tag "sgt".
bindings = (
    {
#     IPv4 prefix setting is mandatory. Value of this setting is IPv4 address
#     in string format.
        ipv4_prefix = "192.168.1.1";

#     IPv4 prefix length setting is mandatory. Value of this setting is
#     integer from range 0 - 32.
        ipv4_prefix_length = 32;

#     SGT setting is mandatory. Value of this setting is integer from range
#     0 - 65535 .
        sgt = 45;
    }
    ,{
#     IPv6 prefix setting is mandatory. Value of this setting is IPv6 address
#     in string format.
        ipv6_prefix = "2003:dead:beef:4dad:23:46:bb:101";
        
#     IPv6 prefix length setting is mandatory. Value of this setting is
#     integer from range 0 - 128.
        ipv6_prefix_length = 128;
        
#     SGT setting is mandatory. Value of this setting is integer from range
#     0 - 65535 . */
        sgt = 47;
    }
);

### eof
